{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "implement_development_plan",
      "description": "Implements the development plan.",
      "parameters": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "array",
            "description": "List of development tasks that need to be done to implement the entire plan.",
            "items": {
              "type": "object",
              "description": "Development task that needs to be done to implement the entire plan.",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description of the development task that needs to be done to implement the entire plan."
                },
                "programmatic_goal": {
                  "type": "string",
                  "description": "Detailed description of programmatic goal. Programmatic goal that will determine if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before the task is sent to you for a review). All details previously specified by user that are important for this task must be included in this programmatic goal."
                },
                "user_review_goal": {
                  "type": "string",
                  "description": "User review goal that will determine if a task is done or not, but from a user perspective since it will be reviewed by a human."
                }
              },
              "required": [
                "description",
                "programmatic_goal",
                "user_review_goal"
              ]
            }
          }
        },
        "required": [
          "plan"
        ]
      }
    }
  ],
  "response": {
    "plan": [
      {
        "description": "Initialize a Node.js project with Express framework and set up an Express server to run on a pre-specified port. Include a basic root route that sends a response indicating the server is live.",
        "programmatic_goal": "When the server is running, navigating to '/' should display a message 'Calculator Server is running'. The port should be configurable through an environment variable, defaulting to 3000 if not provided.",
        "user_review_goal": "Confirm that accessing the root URL of the application in a web browser shows a message indicating the server is operational."
      },
      {
        "description": "Implement the front end using Bootstrap, HTML, and CSS3 to create an interface for the calculator with buttons for digits 0-9, operators for addition, subtraction, multiplication, and division, and an equals button for computing the result.",
        "programmatic_goal": "The HTML should include all the calculator buttons and use Bootstrap classes to arrange them into a grid layout, with separate classes for number and operator buttons. CSS3 should be used to apply additional styling where Bootstrap defaults are insufficient.",
        "user_review_goal": "Visually check that the calculator's interface appears correctly with all necessary buttons in a user-friendly layout."
      },
      {
        "description": "Create jQuery scripts enabling the calculator's buttons to update a display field on the user interface with the user's input, including numbers and selected operations.",
        "programmatic_goal": "Clicking on the calculator buttons should result in the corresponding number or operator appearing in a designated display area on the page. The UI should handle input correctly, allowing for multiple digit numbers and one operator at a time between numbers.",
        "user_review_goal": "Physically test the buttons on the calculator to ensure each one updates the display field correctly with the input value."
      },
      {
        "description": "Develop the logic for the calculator's backend in Node.js to handle HTTP POST requests with calculations to perform and return the result.",
        "programmatic_goal": "A POST endpoint at '/calculate' should accept JSON objects representing the calculation, perform the appropriate arithmetic operation, and return a JSON object containing the result. It must handle addition, subtraction, multiplication, and division.",
        "user_review_goal": "When performing calculations using the calculator UI, verify that pressing the equals button displays the correct calculation result on the interface."
      },
      {
        "description": "Integrate the frontend with the backend such that clicking the equals button on the UI sends a request to the backend, calculates the result, and displays the result on the UI.",
        "programmatic_goal": "Pressing the equals button on the UI should trigger a jQuery AJAX call to the Node.js backend POST endpoint '/calculate', sending the user's calculation, and upon receiving the response, it should update the display area with the calculation result.",
        "user_review_goal": "Perform several calculations using the calculator UI, ensuring that after pressing the equals button, the UI reflects the correct result of the computation."
      }
    ]
  }
}