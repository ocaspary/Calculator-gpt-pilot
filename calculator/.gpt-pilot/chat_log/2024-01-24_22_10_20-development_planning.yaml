endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented, a programmatic goal that will determine if a task can be marked as done from a programmatic
    perspective and user-review goal that will determine if a task is done or not but from a user perspective since it will
    be reviewed by a human.
- role: user
  content: 'You are working in a software development agency and a project manager and software architect approach you telling
    you that you''re assigned to work on a new project. You are working on a App called "calculator" and you need to create
    a detailed development plan so that developers can start developing the app.


    Here is a high level description of "calculator":

    ```

    create a calculator that can do main 4 math functions

    ```



    Here are the technologies that you need to use for this project:

    ```


    - Node.js


    - Express


    - Bootstrap


    - HTML


    - CSS3


    - jQuery


    ```




    Before we go into the coding part, I want you to split the development process of creating this app into smaller tasks
    so that it is easier to develop, debug and make the app work. Each smaller task of this app has to be a whole that can
    be reviewed by a developer to make sure we''re on a right track to create this app completely.


    Each task needs to be related only to the development of this app and nothing else - once the app is fully working, that
    is it. There shouldn''t be a task for researching, deployment, writing documentation, or anything that is not writing
    the actual code.


    Now, based on the project details provided, think task by task and create the entire development plan. Start from the
    project setup and specify each task until the moment when the entire app should be fully working.


    **IMPORTANT**

    Dividing project into tasks is extremely important job and has to be done carefully while always strictly following all
    rules listed bellow.


    Rule #1

    There should never be a task that is only testing or ensuring something works, every task must have coding involved. Have
    this in mind for every task, but it is extremely important for last task of project. Testing if app works will be done
    as part of each task.


    Rule #2

    You have to make sure the project is not split into tasks that are too small or simple for no reason but also not too
    big or complex so that they are hard to develop, debug and review. Here are examples of poorly created tasks:


    **too simple tasks**

    - Set up a Node.js project and install all necessary dependencies.

    - Establish a MongoDB database connection using Mongoose with the IP ''127.0.0.1''.


    **too complex tasks**

    - Set up Node.js project with /home, /profile, /register and /login routes that will have user authentication, connection
    to MongoDB with user schemas, mailing of new users and frontend with nice design.


    You must to avoid creating tasks that are too simple or too complex. You have to aim to create tasks that are medium complexity.
    Here are examples of tasks that are good:


    **good tasks**

    - Set up a Node.js project, install all necessary dependencies and set up an express server with a simple route to `/ping`
    that returns the status 200.

    - Establish a MongoDB database connection and implement the message schema using Mongoose for persistent storage of messages.


    Rule #3

    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number
    of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can give
    you guidance on how many tasks you should create:


    Example #1:

    app description: "I want to create an app that will just say ''Hello World'' when I open it on my localhost:3000."

    number of tasks: 1-3


    Example #2:

    app description: "Create a node.js app that enables users to register and log into the app. On frontend it should have
    /home (shows user data), /register and /login. It should use sessions to keep user logged in."

    number of tasks: 2-6


    Example #3:

    app description: "A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories and
    user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy."

    number of tasks: 5-15'
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan.\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\
    ,\n                    \"description\": \"Description of the development task that needs to be done to implement the entire\
    \ plan.\"\n                },\n                \"programmatic_goal\": {\n                    \"type\": \"string\",\n \
    \                   \"description\": \"Detailed description of programmatic goal. Programmatic goal that will determine\
    \ if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before\
    \ the task is sent to you for a review). All details previously specified by user that are important for this task must\
    \ be included in this programmatic goal.\"\n                },\n                \"user_review_goal\": {\n            \
    \        \"type\": \"string\",\n                    \"description\": \"User review goal that will determine if a task\
    \ is done or not, but from a user perspective since it will be reviewed by a human.\"\n                }\n           \
    \ },\n            \"required\": [\n                \"description\",\n                \"programmatic_goal\",\n        \
    \        \"user_review_goal\"\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n    \"plan\": [\n        {\n            \"description\": \"Initialize a Node.js project with Express\
  \ framework and set up an Express server to run on a pre-specified port. Include a basic root route that sends a response\
  \ indicating the server is live.\",\n            \"programmatic_goal\": \"When the server is running, navigating to '/'\
  \ should display a message 'Calculator Server is running'. The port should be configurable through an environment variable,\
  \ defaulting to 3000 if not provided.\",\n            \"user_review_goal\": \"Confirm that accessing the root URL of the\
  \ application in a web browser shows a message indicating the server is operational.\"\n        },\n        {\n        \
  \    \"description\": \"Implement the front end using Bootstrap, HTML, and CSS3 to create an interface for the calculator\
  \ with buttons for digits 0-9, operators for addition, subtraction, multiplication, and division, and an equals button for\
  \ computing the result.\",\n            \"programmatic_goal\": \"The HTML should include all the calculator buttons and\
  \ use Bootstrap classes to arrange them into a grid layout, with separate classes for number and operator buttons. CSS3\
  \ should be used to apply additional styling where Bootstrap defaults are insufficient.\",\n            \"user_review_goal\"\
  : \"Visually check that the calculator's interface appears correctly with all necessary buttons in a user-friendly layout.\"\
  \n        },\n        {\n            \"description\": \"Create jQuery scripts enabling the calculator's buttons to update\
  \ a display field on the user interface with the user's input, including numbers and selected operations.\",\n         \
  \   \"programmatic_goal\": \"Clicking on the calculator buttons should result in the corresponding number or operator appearing\
  \ in a designated display area on the page. The UI should handle input correctly, allowing for multiple digit numbers and\
  \ one operator at a time between numbers.\",\n            \"user_review_goal\": \"Physically test the buttons on the calculator\
  \ to ensure each one updates the display field correctly with the input value.\"\n        },\n        {\n            \"\
  description\": \"Develop the logic for the calculator's backend in Node.js to handle HTTP POST requests with calculations\
  \ to perform and return the result.\",\n            \"programmatic_goal\": \"A POST endpoint at '/calculate' should accept\
  \ JSON objects representing the calculation, perform the appropriate arithmetic operation, and return a JSON object containing\
  \ the result. It must handle addition, subtraction, multiplication, and division.\",\n            \"user_review_goal\":\
  \ \"When performing calculations using the calculator UI, verify that pressing the equals button displays the correct calculation\
  \ result on the interface.\"\n        },\n        {\n            \"description\": \"Integrate the frontend with the backend\
  \ such that clicking the equals button on the UI sends a request to the backend, calculates the result, and displays the\
  \ result on the UI.\",\n            \"programmatic_goal\": \"Pressing the equals button on the UI should trigger a jQuery\
  \ AJAX call to the Node.js backend POST endpoint '/calculate', sending the user's calculation, and upon receiving the response,\
  \ it should update the display area with the calculation result.\",\n            \"user_review_goal\": \"Perform several\
  \ calculations using the calculator UI, ensuring that after pressing the equals button, the UI reflects the correct result\
  \ of the computation.\"\n        }\n    ]\n}\n```"
